==> waitedLock is used for keep LOCALLOCK valid in error cases, it is first set
	in the begining of WaitOnLock, and set back in the end of WaitOnLock; it is
	used by WaitLockCancel to GrantLocalLock if found share lock granted, and
	process itself is not able to GrantLocalLock before interruption;

	It is possible that LOCALLOCK entry exists for a lock and lockmode, while the
	lock and proclock field is null, that is caused by "out of share memory"
	when allocating lock and proclock, and thus ERROR would go into
	LockWaitCancel, it would not call RemoveLocalLock, let alone the awaitedLock
	is not set yet;

	LockWaitCancel is called when transaction is committed or aborted, or in
	die/StatementCancelHandler, or in ResourceOwnerReleaseInternal;

==> LockReleaseAll would first modify LOCALLOCK entries, then modify LOCK and
	PROCLOCK partition by partition, this can reduce the LWLockAcquire cost;

==> AtPrepare\_Locks would tranverse the LOCALLOCK, and record the locks held
	into a XLogRecData list which resides in memory context; this function is
	called in PrepareTransaction;

	After successful PREPARE, the ownerships of current held locks would be
	transferred to a dummy PGPROC, which is associated with the prepared
	transaction; hence all the corresponding entries in LOCALLOCK would be
	removed; this is done by function PostPrepare_Locks, which is called in
	function PrepareTransaction;
