==> LOCALLOCK is mainly for recording the number of times the lock has been
	acquired, since a process/transaction would be counted only once in share
	memory lock; the numbers are tracked per ResourceOwner;
	Main fields:
	--> LOCALLOCKTAG tag: combination of LOCKTAG and lockmode;
	--> LOCK *lock: corresponding lock in share memory; LOCALLOCK in process
		private, so we can use pointer directly;
	--> PROCLOCK *proclock: corresponding proclock in share memory;
	--> int64 nLocks; number of times acquired;

==> LOCK, PROCLOCK, and LOCALLOCK are organized into hash table
	LockMethodLockHash, LockMethodProcLockHash and LockMethodLocalHash in share
	memory;

==> Function InitLocks is called in postmaster startup, it creates those 3 hash
	tables; there is an assumption of average 2 holders per lock;

==> A question of LockAcquire is: the order of insert/modify LOCALLOCK/PROCLOCK
	and LOCK; should them be atomic?
	First insert an entry in LOCALLOCK even if LOCK conflits are not checked
	yet;

==> LockMethodLockHash is logically divided into several partitions using hash,
	so when reading/writing a LOCK entry, use corresponding partition's LWLockId
	for concurrency protection;
